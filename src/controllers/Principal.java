/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package controllers;

import static constantes.Constantes.INSERCAO;
import static constantes.Constantes.QUICKSORT;
import static constantes.Constantes.QUICKSORT_COM_INSERCAO;
import static constantes.Constantes.SAIR;
import static constantes.Constantes.SHELLSORT;
import static constantes.Constantes.TODOS;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.InvalidParameterException;
import java.util.Scanner;

import constantes.Constantes;
import io.GravarArquivo;
import io.LerArquivoConta;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import models.CadCompra;
import models.Cliente;
import models.ClienteEspecial;
import models.Compra;

/**
 *
 * @author breno
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    
    private ArrayList<Cliente> listaCliente = new ArrayList<>();
    static String optionPane = "";
    
    public Principal() {
        initComponents();
        valeCompra_Cadastrar.setVisible(false);
        dadoValeCompra_Cadastrar.setVisible(false);

        BoxOrdenacao.setSelectedItem("AB");
        
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        cadastrarClientes = new javax.swing.JPanel();
        cpf_Cadastrar = new javax.swing.JLabel();
        cadastrarDados_Cadastrar = new javax.swing.JButton();
        dadoNome_Cadastrar = new javax.swing.JTextField();
        dadoCpf_Cadastrar = new javax.swing.JTextField();
        dadoValeCompra_Cadastrar = new javax.swing.JTextField();
        valeCompra_Cadastrar = new javax.swing.JLabel();
        clienteEspCheck_Cadastrar = new javax.swing.JCheckBox();
        nome_Cadastrar = new javax.swing.JLabel();
        cadastrarCompras = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        ordenar = new javax.swing.JPanel();
        BoxOrdenacao = new javax.swing.JComboBox<>();
        jProgressBar1 = new javax.swing.JProgressBar();
        campoEscrita = new javax.swing.JScrollPane();
        campoDosResultados = new javax.swing.JTextArea();
        Pesquisar = new javax.swing.JPanel();
        clientes = new javax.swing.JPanel();
        compras = new javax.swing.JPanel();
        sair = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 380));

        cpf_Cadastrar.setText("CPF");

        cadastrarDados_Cadastrar.setText("Cadastrar");
        cadastrarDados_Cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarDados_CadastrarActionPerformed(evt);
            }
        });

        dadoNome_Cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dadoNome_CadastrarActionPerformed(evt);
            }
        });

        valeCompra_Cadastrar.setText("Vale Compra");

        clienteEspCheck_Cadastrar.setText("Cliente Especial");
        clienteEspCheck_Cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clienteEspCheck_CadastrarActionPerformed(evt);
            }
        });

        nome_Cadastrar.setText("Nome");

        javax.swing.GroupLayout cadastrarClientesLayout = new javax.swing.GroupLayout(cadastrarClientes);
        cadastrarClientes.setLayout(cadastrarClientesLayout);
        cadastrarClientesLayout.setHorizontalGroup(
            cadastrarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cadastrarClientesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cadastrarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cadastrarClientesLayout.createSequentialGroup()
                        .addGroup(cadastrarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(cadastrarClientesLayout.createSequentialGroup()
                                .addComponent(valeCompra_Cadastrar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dadoValeCompra_Cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(cadastrarClientesLayout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addComponent(clienteEspCheck_Cadastrar)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cadastrarClientesLayout.createSequentialGroup()
                        .addGroup(cadastrarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(cadastrarClientesLayout.createSequentialGroup()
                                .addComponent(cpf_Cadastrar)
                                .addGap(18, 18, 18)
                                .addComponent(dadoCpf_Cadastrar))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, cadastrarClientesLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(nome_Cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dadoNome_Cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(1039, 1039, 1039))))
            .addGroup(cadastrarClientesLayout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(cadastrarDados_Cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        cadastrarClientesLayout.setVerticalGroup(
            cadastrarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cadastrarClientesLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(cadastrarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dadoNome_Cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nome_Cadastrar))
                .addGap(33, 33, 33)
                .addGroup(cadastrarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dadoCpf_Cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpf_Cadastrar))
                .addGap(18, 18, 18)
                .addComponent(clienteEspCheck_Cadastrar)
                .addGap(34, 34, 34)
                .addGroup(cadastrarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valeCompra_Cadastrar)
                    .addComponent(dadoValeCompra_Cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cadastrarDados_Cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        jTabbedPane2.addTab("Cadastrar Clientes", cadastrarClientes);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout cadastrarComprasLayout = new javax.swing.GroupLayout(cadastrarCompras);
        cadastrarCompras.setLayout(cadastrarComprasLayout);
        cadastrarComprasLayout.setHorizontalGroup(
            cadastrarComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cadastrarComprasLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1228, Short.MAX_VALUE))
        );
        cadastrarComprasLayout.setVerticalGroup(
            cadastrarComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cadastrarComprasLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(293, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("CadastrarCompras", cadastrarCompras);

        BoxOrdenacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "                       ", "Inserção Direta", "Quick Sort", "Shell Sort", "Quick com Inserção", " " }));
        BoxOrdenacao.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                BoxOrdenacaoComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                BoxOrdenacaoComponentShown(evt);
            }
        });
        BoxOrdenacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoxOrdenacaoActionPerformed(evt);
            }
        });

        jProgressBar1.setStringPainted(true);

        campoDosResultados.setColumns(20);
        campoDosResultados.setRows(5);
        campoEscrita.setViewportView(campoDosResultados);

        javax.swing.GroupLayout ordenarLayout = new javax.swing.GroupLayout(ordenar);
        ordenar.setLayout(ordenarLayout);
        ordenarLayout.setHorizontalGroup(
            ordenarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordenarLayout.createSequentialGroup()
                .addGroup(ordenarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ordenarLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(BoxOrdenacao, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordenarLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(campoEscrita, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(1060, Short.MAX_VALUE))
        );
        ordenarLayout.setVerticalGroup(
            ordenarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordenarLayout.createSequentialGroup()
                .addGroup(ordenarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ordenarLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(BoxOrdenacao, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordenarLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addComponent(campoEscrita, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Ordenar", ordenar);

        javax.swing.GroupLayout PesquisarLayout = new javax.swing.GroupLayout(Pesquisar);
        Pesquisar.setLayout(PesquisarLayout);
        PesquisarLayout.setHorizontalGroup(
            PesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PesquisarLayout.setVerticalGroup(
            PesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Pesquisar", Pesquisar);

        javax.swing.GroupLayout clientesLayout = new javax.swing.GroupLayout(clientes);
        clientes.setLayout(clientesLayout);
        clientesLayout.setHorizontalGroup(
            clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1647, Short.MAX_VALUE)
        );
        clientesLayout.setVerticalGroup(
            clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 341, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Clientes", clientes);

        javax.swing.GroupLayout comprasLayout = new javax.swing.GroupLayout(compras);
        compras.setLayout(comprasLayout);
        comprasLayout.setHorizontalGroup(
            comprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1647, Short.MAX_VALUE)
        );
        comprasLayout.setVerticalGroup(
            comprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 341, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Compras", compras);

        javax.swing.GroupLayout sairLayout = new javax.swing.GroupLayout(sair);
        sair.setLayout(sairLayout);
        sairLayout.setHorizontalGroup(
            sairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        sairLayout.setVerticalGroup(
            sairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Sair", sair);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1634, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cadastrarDados_CadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarDados_CadastrarActionPerformed

        String nome = dadoNome_Cadastrar.getText();
        String cpf = dadoCpf_Cadastrar.getText();

        if (clienteEspCheck_Cadastrar.isSelected()) {

            Double valeCompra = Double.parseDouble(dadoValeCompra_Cadastrar.getText());

            listaCliente.add(new ClienteEspecial(valeCompra, nome, cpf));
        }

        listaCliente.add(new Cliente(nome, cpf));
        
    }//GEN-LAST:event_cadastrarDados_CadastrarActionPerformed

    private void clienteEspCheck_CadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clienteEspCheck_CadastrarActionPerformed
        if (clienteEspCheck_Cadastrar.isSelected()) {
            valeCompra_Cadastrar.setVisible(true);
            dadoValeCompra_Cadastrar.setVisible(true);
        }
        if(!clienteEspCheck_Cadastrar.isSelected()){
            valeCompra_Cadastrar.setVisible(false);
            dadoValeCompra_Cadastrar.setVisible(false);
        }
    }//GEN-LAST:event_clienteEspCheck_CadastrarActionPerformed

    private void dadoNome_CadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dadoNome_CadastrarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dadoNome_CadastrarActionPerformed

    private void BoxOrdenacaoComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_BoxOrdenacaoComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_BoxOrdenacaoComponentResized

    private void BoxOrdenacaoComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_BoxOrdenacaoComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_BoxOrdenacaoComponentShown

    private void BoxOrdenacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxOrdenacaoActionPerformed
        int escolha = BoxOrdenacao.getSelectedIndex() + 1;
        try {
            ordernar(escolha, 1);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BoxOrdenacaoActionPerformed

    private static CadCompra lerArquivo(String caminho) throws FileNotFoundException {
        LerArquivoConta arquivo = new LerArquivoConta(caminho);
        CadCompra compras = new CadCompra(arquivo.ler());
        arquivo.fecha();

        return compras;
    }

    private static void ordernar(int escolha, int iteracoes) throws FileNotFoundException {
        //System.out.println("\nM�TODO: " + getDescricaoOrdenacao(escolha, false));
        JOptionPane.showMessageDialog(null, "\nMÉTODO: " + getDescricaoOrdenacao(escolha, false), null, JOptionPane.INFORMATION_MESSAGE);
        for (int i = 0; i < Constantes.NOME_ARQUIVO.length; i++) {
            for (int j = 0; j < Constantes.TIPO_ARQUIVO.length; j++) {

                tempoInicial = System.currentTimeMillis();

                for (int k = 0; k < iteracoes; k++) {
                    String caminho = Constantes.CAMINHO_TESTE + "compra" + Constantes.NOME_ARQUIVO[i] + Constantes.TIPO_ARQUIVO[j] + ".txt";
                    CadCompra compras = lerArquivo(caminho);

                    String caminhoProcessado = Constantes.CAMINHO_PROCESSADO + Constantes.NOME_ARQUIVO[i] + Constantes.TIPO_ARQUIVO[j] + getDescricaoOrdenacao(escolha, true) + ".txt";
                    if (compras.getVetCompra() != null) {
                        caseOrdenar(compras, escolha);
                        gravarConta(compras, caminhoProcessado);
                    }
                }

                tempoFinal = System.currentTimeMillis();
                //System.out.print(" -> Arquivo: " + Constantes.NOME_ARQUIVO[i] + Constantes.TIPO_ARQUIVO[j] + ".txt");
                //System.out.print(" [Tempo m�dio decorido : " + (tempoFinal - tempoInicial) / iteracoes + " ms]\n");
               
                optionPane += " -> Arquivo: " + Constantes.NOME_ARQUIVO[i] + Constantes.TIPO_ARQUIVO[j] + ".txt - Tempo médio decorrido: " + (tempoFinal - tempoInicial) / iteracoes + " ms]\n";       
                
                JOptionPane.showMessageDialog(null, optionPane, null, JOptionPane.INFORMATION_MESSAGE);

            }
        }
    }
    
    public void inserirDados(){
        campoDosResultados.insert(optionPane, 1);
        optionPane = "";
    }

    private static void gravarConta(CadCompra compras, String caminhoArquivo) {
        try {
            GravarArquivo saida = new GravarArquivo(caminhoArquivo);
            for (Compra c : compras.getVetCompra()) {
                saida.gravar(c.toStringArquivo(compras.getVetCompra().size()) + "\n");
            }
            saida.fechar();
        } catch (IOException e) {
            System.out.println("ERRO " + e.getMessage());
            JOptionPane.showMessageDialog(null, "ERRO" + e.getMessage(), "Erro ao gravar conta!", HEIGHT);
        }
    }

    private static String getDescricaoOrdenacao(int escolha, boolean abreviado) {
        switch (escolha) {
            case INSERCAO:
                return abreviado ? "-InsDir" : "INSERÇÃO";
            case QUICKSORT:
                return abreviado ? "-Quick" : "QUICKSORT";
            case SHELLSORT:
                return abreviado ? "-Shell" : "SHELLSORT";
            case QUICKSORT_COM_INSERCAO:
                return abreviado ? "-QuickIns" : "QUICKSORT COM INSERÇÃO";
            default:
                throw new InvalidParameterException("ERRO: Op��o informada inv�lida");
            // JOptionPane.showMessageDialog(null, "ERRO: Opção informada invalida", "Insira outra opção!", JOptionPane.ERROR_MESSAGE);

        }
    }

    private static void caseOrdenar(CadCompra compras, int escolha) {
        switch (escolha) {
            case INSERCAO:
                compras.insercaoDireta();
                break;
            case QUICKSORT:
                compras.quickSort();
                break;
            case SHELLSORT:
                compras.shellSort();
                break;
            case QUICKSORT_COM_INSERCAO:
                compras.quickComInsercao();
                break;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Principal().setVisible(true);
        });
    }

    private static Long tempoInicial;
    private static Long tempoFinal;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> BoxOrdenacao;
    private javax.swing.JPanel Pesquisar;
    private javax.swing.JPanel cadastrarClientes;
    private javax.swing.JPanel cadastrarCompras;
    private javax.swing.JButton cadastrarDados_Cadastrar;
    private javax.swing.JTextArea campoDosResultados;
    private javax.swing.JScrollPane campoEscrita;
    private javax.swing.JCheckBox clienteEspCheck_Cadastrar;
    private javax.swing.JPanel clientes;
    private javax.swing.JPanel compras;
    private javax.swing.JLabel cpf_Cadastrar;
    private javax.swing.JTextField dadoCpf_Cadastrar;
    private javax.swing.JTextField dadoNome_Cadastrar;
    private javax.swing.JTextField dadoValeCompra_Cadastrar;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel nome_Cadastrar;
    private javax.swing.JPanel ordenar;
    private javax.swing.JPanel sair;
    private javax.swing.JLabel valeCompra_Cadastrar;
    // End of variables declaration//GEN-END:variables
}
